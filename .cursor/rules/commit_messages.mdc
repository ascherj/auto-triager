---
description:
globs:
alwaysApply: false
---
# Commit Message Generation for Subtask Completion

## **Commit Message Format**
- **Use conventional commit format**: `type(scope): description`
- **Common types**: `feat`, `fix`, `docs`, `test`, `refactor`, `chore`
- **Scope**: Use component name or general category (e.g., `dev`, `infra`, `api`, `ui`)
- **Description**: Clear, imperative mood, start with verb

## **Post-Subtask Commit Workflow**

### **1. After Completing a Subtask:**
- Review all files changed during subtask implementation
- Stage changes with `git add .`
- Generate commit message following this template

### **2. Commit Message Template:**
```
type(scope): Brief description of what was implemented

- Key implementation detail 1
- Key implementation detail 2
- Key implementation detail 3
- Notable features or fixes

Completes Task X.Y: [Subtask Title]
Tested: [Brief testing summary]
```

### **3. Example Commit Messages:**

```bash
# Development Infrastructure (single -m with \n for proper formatting)
git commit -m "feat(dev): Add comprehensive Makefile with development targets

- Implement core development targets (dev, test, lint, deploy-fly)
- Add infrastructure management (dev-up/down, health checks)
- Include database tools and Kafka management
- Provide environment setup and validation
- Add comprehensive help system with target descriptions

Completes Task 1.3: Create Makefile with Development Targets
Tested: All targets validated with infrastructure services"

# API Implementation
git commit -m "feat(api): Implement FastAPI webhook receiver

- Add GitHub webhook validation and signature verification
- Implement issue, PR, and comment event handlers
- Add Kafka producer for raw events to issues.raw topic
- Include comprehensive error handling and logging
- Add health check and metrics endpoints

Completes Task 2.1: Create FastAPI Webhook Endpoint
Tested: Manual webhook tests with ngrok"

# Component Setup
git commit -m "feat(infra): Initialize component development environments

- Add Dockerfile.dev for all four components
- Create requirements.txt with FastAPI, LangChain, React deps
- Set up basic project structure for each component
- Configure development containers with volume mounts
- Add component-specific README files

Completes Task 1.5: Initialize Component-Specific Development Environments
Tested: All containers build and start successfully"
```

## **Proper Formatting Technique**

### **Single-Spaced Bullet Points:**
Use **one `-m` flag** with embedded newlines, not multiple `-m` flags:

```bash
# ✅ CORRECT: Single -m with \n (creates single-spaced bullets)
git commit -m "feat(dev): Add feature

- First bullet point
- Second bullet point
- Third bullet point

Completes Task X.Y: Subtask Title
Tested: Brief summary"

# ❌ WRONG: Multiple -m flags (creates double-spaced bullets)
git commit -m "feat(dev): Add feature" -m "- First bullet" -m "- Second bullet"
```

## **Commit Message Best Practices**

### **DO:**
- ✅ Use imperative mood ("Add", "Fix", "Update", not "Added", "Fixed", "Updated")
- ✅ Keep first line under 72 characters
- ✅ Reference the completed subtask ID and title
- ✅ Include testing summary when applicable
- ✅ List key implementation points in bullet format
- ✅ Use consistent scopes across the project
- ✅ Use single `-m` flag to avoid double-spacing

### **DON'T:**
- ❌ Use past tense ("Added feature" → "Add feature")
- ❌ Include file names unless specifically relevant
- ❌ Write vague descriptions ("Update code", "Fix stuff")
- ❌ Forget to reference the completed task
- ❌ Skip the testing summary for significant changes
- ❌ Use multiple `-m` flags for bullet points (creates double-spacing)

## **Scope Guidelines**

| Scope | Usage |
|-------|-------|
| `dev` | Development tools, build systems, Makefiles |
| `infra` | Docker, database, infrastructure setup |
| `api` | Backend API implementations |
| `ui` | Frontend/dashboard implementations |
| `docs` | Documentation updates |
| `test` | Test implementations |
| `ci` | GitHub Actions, deployment configs |

## **Integration with Taskmaster Workflow**

### **After Updating a Subtask:**
1. Complete the implementation work
2. Update subtask with `update_subtask` including implementation details
3. Set subtask status to 'done' with `set_task_status`
4. **Generate and execute commit** using this format
5. Consider if changeset is needed (see [changeset.mdc](mdc:.cursor/rules/changeset.mdc))

### **For Rule Updates:**
- If new patterns emerge during implementation, update relevant rules
- Include rule updates in the same commit as the implementation
- Reference rule changes in commit body when significant

## **Automation Reminder**

**After each subtask completion, always:**
1. Review implementation against subtask requirements
2. Stage changes: `git add .`
3. Generate commit message using this template
4. Execute commit with descriptive message
5. Consider pushing to trigger CI pipeline

This ensures consistent commit history and proper tracking of Taskmaster progress.
