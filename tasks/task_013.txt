# Task ID: 13
# Title: Security Hardening and Secret Management
# Status: pending
# Dependencies: 2, 4, 7, 10
# Priority: high
# Description: Implement security best practices including GitHub signature verification, principle of least privilege, and secure secret management.
# Details:
1. Implement GitHub webhook signature verification:
```python
import hmac
import hashlib

def verify_signature(payload_body, secret_token, signature_header):
    """Verify that the payload was sent from GitHub by validating SHA256."""
    signature = 'sha256=' + hmac.new(
        key=secret_token.encode(),
        msg=payload_body,
        digestmod=hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(signature, signature_header)

@app.post("/webhook/github")
async def github_webhook(request: Request):
    payload_body = await request.body()
    signature_header = request.headers.get("X-Hub-Signature-256")
    
    if not verify_signature(payload_body, GITHUB_WEBHOOK_SECRET, signature_header):
        raise HTTPException(status_code=401, detail="Invalid signature")
    
    # Process webhook
```
2. Configure Fly.io secrets for sensitive values:
```bash
fly secrets set GITHUB_WEBHOOK_SECRET=your_secret_value
fly secrets set OPENAI_API_KEY=your_api_key
```
3. Implement database connection with least privilege roles
4. Add rate limiting to all public endpoints
5. Configure CORS policies for the API
6. Implement JWT authentication for dashboard API access
7. Set up regular security scanning in CI pipeline
8. Configure secure headers (CSP, HSTS, etc.)

# Test Strategy:
1. Perform security scanning with tools like OWASP ZAP
2. Test webhook signature verification with valid and invalid signatures
3. Verify secret access in deployed environment
4. Test rate limiting behavior
5. Validate CORS policies
6. Verify JWT authentication and authorization
