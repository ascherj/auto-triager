# Task ID: 4
# Title: Postgres Database Schema and Setup
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Set up Postgres 16 with pgvector extension and create the necessary schema for storing enriched GitHub issues with vector embeddings.
# Details:
1. Create Postgres initialization script in `/infra/postgres/init.sql`:
```sql
CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE issues (
  id BIGINT PRIMARY KEY,
  repo TEXT NOT NULL,
  title TEXT,
  body TEXT,
  component TEXT,
  severity TEXT,
  summary TEXT,
  tags TEXT[],
  embedding VECTOR(1536),
  created_at TIMESTAMPTZ,
  enriched_at TIMESTAMPTZ
);

CREATE INDEX idx_issues_severity ON issues(severity);
CREATE INDEX idx_issues_component ON issues(component);
CREATE INDEX idx_issues_repo ON issues(repo);
CREATE INDEX idx_issues_created_at ON issues(created_at);

-- Vector similarity search index
CREATE INDEX idx_issues_embedding ON issues USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- Create roles with least privilege
CREATE ROLE reader WITH LOGIN PASSWORD 'reader_password' NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION;
CREATE ROLE writer WITH LOGIN PASSWORD 'writer_password' NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION;

GRANT SELECT ON ALL TABLES IN SCHEMA public TO reader;
GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA public TO writer;
```
2. Configure Postgres in Docker Compose with pgvector extension
3. Implement database connection pooling using asyncpg
4. Create SQLAlchemy models or raw SQL queries for database operations
5. Implement migration strategy using Alembic

# Test Strategy:
1. Verify pgvector extension installation
2. Test schema creation with sample data
3. Benchmark vector similarity queries
4. Validate role-based access control
5. Test connection pooling under load
