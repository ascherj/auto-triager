# Task ID: 7
# Title: FastAPI WebSocket Gateway Implementation
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Create a FastAPI service that consumes from the 'issues.enriched' topic and streams updates to clients via WebSockets.
# Details:
1. Create FastAPI application in `/gateway` directory
2. Implement WebSocket endpoint for streaming issues:
```python
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import asyncio
from aiokafka import AIOKafkaConsumer
import json

app = FastAPI()

class ConnectionManager:
    def __init__(self):
        self.active_connections = []
        
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        
    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)
        
    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)

manager = ConnectionManager()

@app.websocket("/issues/stream")
async def websocket_endpoint(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            # Keep connection alive
            await websocket.receive_text()
    except WebSocketDisconnect:
        manager.disconnect(websocket)

# Kafka consumer task
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(consume_enriched_issues())

async def consume_enriched_issues():
    consumer = AIOKafkaConsumer(
        'issues.enriched',
        bootstrap_servers='redpanda:9092',
        group_id='websocket-gateway',
        value_deserializer=lambda m: json.loads(m.decode('utf-8'))
    )
    await consumer.start()
    try:
        async for msg in consumer:
            await manager.broadcast(json.dumps(msg.value))
    finally:
        await consumer.stop()
```
3. Implement REST fallback endpoint for polling:
```python
@app.get("/issues")
async def get_issues(severity: Optional[str] = None, component: Optional[str] = None):
    # Query database with filters
    # Return paginated results
```
4. Add authentication for WebSocket connections (JWT or API key)
5. Implement filtering capabilities for WebSocket streams
6. Add connection management with heartbeats and timeouts
7. Implement graceful shutdown

# Test Strategy:
1. Unit tests for WebSocket connection management
2. Integration tests with simulated clients
3. Load testing with multiple concurrent WebSocket connections
4. Verify message delivery order and completeness
5. Test reconnection behavior
6. Benchmark latency from Kafka to WebSocket clients
