# Auto‑Triager – Product Requirements Document (PRD)

## 1. Overview

Auto‑Triager is an open‑source service that ingests GitHub issues in real time, classifies them with an AI agent, ranks their urgency, and streams the enriched results to a live React dashboard. The project demonstrates senior‑level ownership of a distributed, AI‑augmented system and serves as a portfolio centerpiece during job interviews.

## 2. Purpose & Vision

* **Purpose:** Reduce manual triage effort for maintainers and accelerate response time to critical issues.
* **Vision:** Become the default lightweight triage assistant that any GitHub repository can self‑host in minutes.

## 3. Background & Problem Statement

Maintainers of active repositories spend a disproportionate amount of time reading, tagging, and prioritizing issues. Repetitive triage slows down fix velocity and detracts from higher‑value engineering tasks. Existing bots largely rely on keyword heuristics and lack nuanced understanding.

## 4. Goals & Objectives

| ID | Goal                                                | Success Metric                                       |
| -- | --------------------------------------------------- | ---------------------------------------------------- |
| G1 | **Accurate classification** of component & severity | ≥ 90 % precision @ top label (manual sample)         |
| G2 | **Low‑latency triage**                              | P95 end‑to‑end < 2 s per issue (ingest→dashboard)    |
| G3 | **Scalable throughput**                             | Sustain ≥ 1 000 issues / min with horizontal scaling |
| G4 | **Easy deployment**                                 | `git clone && make deploy` completes in < 15 min     |
| G5 | **Demonstrate senior system design**                | Positive recruiter feedback & interview discussion   |

## 5. User Personas

1. **Open‑Source Maintainer (primary)** – wants quick visibility into critical bugs.
2. **Engineering Manager** – monitors issue volume & team workload.
3. **Recruiter / Interviewer** – reviews codebase & live demo to assess candidate.

## 6. User Stories / Jobs‑To‑Be‑Done

* *As a maintainer*, I want new issues automatically labelled with component & severity so I can focus on fixes.
* *As an EM*, I want a dashboard sorted by urgency to allocate resources.
* *As a recruiter*, I want to see a polished demo that proves full‑stack competency.

## 7. Functional Requirements (FR)

| ID   | Requirement                                                                                                                |
| ---- | -------------------------------------------------------------------------------------------------------------------------- |
| FR1  | Receive GitHub Webhook events (`issues`, `issue_comment`, `pull_request`) via a secure FastAPI endpoint.                   |
| FR2  | Serialize raw events to a **"issues.raw"** Kafka/Redpanda topic.                                                           |
| FR3  | Worker pool consumes `issues.raw`, invokes LLM (LangChain/AutoGen) to produce: `component`, `severity`, `summary`, `tags`. |
| FR4  | Persist enriched issues in Postgres with pgvector embeddings.                                                              |
| FR5  | Publish enriched payload to **"issues.enriched"** topic.                                                                   |
| FR6  | WebSocket gateway streams updates to React dashboard in real time.                                                         |
| FR7  | Dashboard allows filtering/sorting by severity, component, repo, date.                                                     |
| FR8  | Provide manual correction UI; corrections round‑trip back to DB.                                                           |
| FR9  | CLI/Makefile for local dev (`make dev`) and production deploy (`make deploy-fly`).                                         |
| FR10 | GitHub Actions CI: lint, test, build images, push to registry, deploy.                                                     |

## 8. Non‑Functional Requirements (NFR)

* **Performance:** P95 latency < 2 s; throughput ≥ 1 000 issues/min with 4 workers.
* **Reliability:** At‑least‑once processing; replay support from raw topic.
* **Security:** Verify GitHub signatures; principle of least privilege DB roles; secret management via Fly.io.
* **Observability:** Prometheus metrics, Loki logs, Grafana dashboard.
* **Cost Control:** Configurable max tokens / rate limit on OpenAI usage.
* **Accessibility:** Dashboard WCAG 2.1 AA.

## 9. Technical Stack Overview

| Layer         | Tech                                                                |
| ------------- | ------------------------------------------------------------------- |
| Ingress       | FastAPI + Uvicorn                                                   |
| Messaging     | Redpanda (Kafka API) for MVP; pluggable Kafka Cluster for scale     |
| AI            | LangChain (OpenAI GPT‑4o) encapsulated in `IssueClassifier` service |
| DB            | Postgres 16 + pgvector extension                                    |
| API / Gateway | FastAPI WebSocket & REST                                            |
| Frontend      | React 18 + Vite + Tailwind + shadcn/ui                              |
| Infra         | Docker Compose (local), Fly.io Machines (prod)                      |
| CI/CD         | GitHub Actions with staged Docker buildx                            |

## 10. System Architecture

```
GitHub Webhook → FastAPI "ingress" → Redpanda topic "issues.raw"
                                     └──▶ IssueClassifier workers (Python, LangChain)
                                             ├─▶ Postgres (pgvector)
                                             └─▶ Redpanda topic "issues.enriched"
React Dashboard ⇐ FastAPI WebSocket « gateway »
```

## 11. Data Model (simplified)

```sql
CREATE TABLE issues (
  id BIGINT PRIMARY KEY,
  repo TEXT NOT NULL,
  title TEXT,
  body TEXT,
  component TEXT,
  severity TEXT,
  summary TEXT,
  tags TEXT[],
  embedding VECTOR(1536),
  created_at TIMESTAMPTZ,
  enriched_at TIMESTAMPTZ
);
```

## 12. API Contracts

* **POST /webhook/github** – validated GitHub webhook.
* **GET /issues?severity=critical** – REST fallback for polling.
* **WS /issues/stream** – server‑sent enriched issues.

## 13. Milestones & Timeline (8 weeks)

1. **Week 1:** Repo scaffold, Docker Compose, CI.
2. **Week 2:** Secure webhook receiver, enqueue to `issues.raw`.
3. **Week 3:** Consumer skeleton, Postgres schema, local Redpanda.
4. **Week 4:** LangChain classifier + MVP enrichment → DB.
5. **Week 5:** React dashboard v1 (REST polling).
6. **Week 6:** WebSocket gateway, Fly.io deploy, screencast GIF.
7. **Week 7:** Observability stack, load test to 1 000 issues/min.
8. **Week 8:** Polish, docs, blog post, LinkedIn launch.

## 14. Success Metrics & KPIs

| Metric                                      | Target        |
| ------------------------------------------- | ------------- |
| Classification precision                    | ≥ 90 %        |
| Mean latency (ingest→dashboard)             | < 1 s         |
| Deploy time (clean env)                     | < 15 min      |
| Demo viewer conversions (interview invites) | ≥ 3 per month |

## 15. Out‑of‑Scope (MVP)

* Cross‑repo correlation & deduplication.
* Auto‑reply to GitHub issues.
* Fine‑tuned or self‑hosted LLMs.
* Mobile‑optimized dashboard.

## 16. Risks & Mitigations

| Risk                      | Probability | Impact | Mitigation                           |
| ------------------------- | ----------- | ------ | ------------------------------------ |
| OpenAI quota limits       | M           | H      | Rate‑limit & cache embeddings        |
| Fly.io cold‑start latency | L           | M      | Use Machines with min‑count = 1      |
| Incorrect classification  | M           | M      | Manual correction UI + feedback loop |
| Kafka ops complexity      | M           | L      | Start with Redpanda single‑node      |

## 17. Future Work

* Multi‑repo & organization dashboards.
* Summarize issue threads & PR links.
* Suggest assignees based on component expertise.
* Integration with Slack / Teams notifications.

## 18. Glossary

| Term         | Definition                                         |
| ------------ | -------------------------------------------------- |
| **LLM**      | Large Language Model (e.g., GPT‑4o).               |
| **Redpanda** | Kafka‑compatible single‑binary streaming platform. |
| **pgvector** | Postgres extension for vector similarity search.   |
| **Triage**   | Process of categorizing & prioritizing issues.     |

---

**Author:** Jake Ascher  **Last Updated:** <!-- auto‑update -->
