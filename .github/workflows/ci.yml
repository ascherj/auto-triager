name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Environment and dependency checks
  setup:
    name: Setup and Environment Check
    runs-on: ubuntu-latest
    outputs:
      has-python-components: ${{ steps.check-components.outputs.has-python }}
      has-js-components: ${{ steps.check-components.outputs.has-js }}
      makefile-exists: ${{ steps.check-makefile.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Makefile
        id: check-makefile
        run: |
          if [ -f "Makefile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Makefile found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Makefile not found"
          fi

      - name: Check component types
        id: check-components
        run: |
          # Check for Python components
          if find . -name "requirements.txt" -o -name "pyproject.toml" | grep -q .; then
            echo "has-python=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Python components detected"
          else
            echo "has-python=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No Python components detected"
          fi

          # Check for JavaScript/Node components
          if find . -name "package.json" | grep -q .; then
            echo "has-js=true" >> $GITHUB_OUTPUT
            echo "‚úÖ JavaScript components detected"
          else
            echo "has-js=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No JavaScript components detected"
          fi

      - name: Validate Makefile targets
        if: steps.check-makefile.outputs.exists == 'true'
        run: |
          echo "üîç Available Makefile targets:"
          make help

  # Linting jobs
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-python-components == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Python linting
        run: |
          if [ "${{ needs.setup.outputs.makefile-exists }}" == "true" ]; then
            make lint-python
          else
            echo "Running ruff directly..."
            find . -name "*.py" -type f | head -1 > /dev/null && ruff check . || echo "No Python files to lint"
          fi

  lint-javascript:
    name: Lint JavaScript/TypeScript Code
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-js-components == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          # Install dependencies for all components with package.json
          find . -name "package.json" -not -path "./node_modules/*" | while read package_file; do
            dir=$(dirname "$package_file")
            echo "Installing dependencies in $dir"
            cd "$dir" && npm ci
            cd - > /dev/null
          done

      - name: Run JavaScript linting
        run: |
          if [ "${{ needs.setup.outputs.makefile-exists }}" == "true" ]; then
            make lint-js
          else
            echo "Running ESLint directly on components..."
            find . -name "package.json" -not -path "./node_modules/*" | while read package_file; do
              dir=$(dirname "$package_file")
              cd "$dir"
              if npm run lint &>/dev/null; then
                npm run lint
              else
                echo "No lint script found in $dir"
              fi
              cd - > /dev/null
            done
          fi

  # Testing jobs
  test-components:
    name: Test All Components
    runs-on: ubuntu-latest
    needs: [setup, lint-python, lint-javascript]
    if: always() && (needs.lint-python.result == 'success' || needs.lint-python.result == 'skipped') && (needs.lint-javascript.result == 'success' || needs.lint-javascript.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python testing dependencies
        if: needs.setup.outputs.has-python-components == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - name: Install Node.js dependencies
        if: needs.setup.outputs.has-js-components == 'true'
        run: |
          find . -name "package.json" -not -path "./node_modules/*" | while read package_file; do
            dir=$(dirname "$package_file")
            echo "Installing dependencies in $dir"
            cd "$dir" && npm ci
            cd - > /dev/null
          done

      - name: Run tests
        run: |
          if [ "${{ needs.setup.outputs.makefile-exists }}" == "true" ]; then
            make test
          else
            echo "Running tests directly..."
            # Run Python tests
            if [ "${{ needs.setup.outputs.has-python-components }}" == "true" ]; then
              find . -name "test_*.py" -o -name "*_test.py" | head -1 > /dev/null && pytest . || echo "No Python tests found"
            fi
            # Run JavaScript tests
            if [ "${{ needs.setup.outputs.has-js-components }}" == "true" ]; then
              find . -name "package.json" -not -path "./node_modules/*" | while read package_file; do
                dir=$(dirname "$package_file")
                cd "$dir"
                if npm run test &>/dev/null; then
                  npm run test
                else
                  echo "No test script found in $dir"
                fi
                cd - > /dev/null
              done
            fi
          fi

  # Docker build and registry push
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [setup, test-components]
    if: always() && needs.test-components.result == 'success'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Docker Compose
        id: check-compose
        run: |
          if [ -f "infra/docker-compose.yml" ]; then
            echo "compose-exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Docker Compose found"
          else
            echo "compose-exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Docker Compose not found"
          fi

      - name: Build images with Makefile
        if: needs.setup.outputs.makefile-exists == 'true' && steps.check-compose.outputs.compose-exists == 'true'
        run: |
          echo "üèóÔ∏è Building images using Makefile..."
          make build || echo "Build step completed with warnings"

      - name: Extract metadata for images
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Tag and push images
        if: steps.check-compose.outputs.compose-exists == 'true'
        run: |
          echo "üè∑Ô∏è Tagging and pushing images..."
          # This is a placeholder for when we have actual Dockerfiles
          # We'll build and push individual component images here
          echo "Image tagging will be implemented when component Dockerfiles are ready"

  # Infrastructure validation
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auto_triager
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test database connectivity
        run: |
          echo "üóÑÔ∏è Testing PostgreSQL connectivity..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d auto_triager -c "SELECT version();"

          echo "üß™ Testing pgvector extension..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d auto_triager -c "CREATE EXTENSION IF NOT EXISTS vector;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d auto_triager -c "SELECT * FROM pg_extension WHERE extname = 'vector';"

      - name: Validate Docker Compose
        if: needs.setup.outputs.makefile-exists == 'true'
        run: |
          if [ -f "infra/docker-compose.yml" ]; then
            echo "‚úÖ Validating Docker Compose configuration..."
            cd infra && docker compose config
          else
            echo "‚ÑπÔ∏è Docker Compose file not found, skipping validation"
          fi

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [build-and-push, validate-infrastructure]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Check for Fly configuration
        id: check-fly
        run: |
          if [ -f "fly.toml" ]; then
            echo "fly-config-exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Fly.io configuration found"
          else
            echo "fly-config-exists=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Fly.io configuration not found"
          fi

      - name: Deploy to Fly.io with Makefile
        if: needs.setup.outputs.makefile-exists == 'true' && steps.check-fly.outputs.fly-config-exists == 'true'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "üöÄ Deploying to Fly.io using Makefile..."
          make deploy-fly

      - name: Deploy to Fly.io directly
        if: steps.check-fly.outputs.fly-config-exists == 'true' && (needs.setup.outputs.makefile-exists != 'true' || env.FLY_API_TOKEN == '')
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "üöÄ Deploying to Fly.io directly..."
          flyctl deploy --remote-only

      - name: Deployment summary
        run: |
          echo "üéâ Deployment job completed"
          echo "Check Fly.io dashboard for deployment status"

  # Notification job
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [setup, lint-python, lint-javascript, test-components, build-and-push, validate-infrastructure, deploy]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Linting | ${{ needs.lint-python.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| JavaScript Linting | ${{ needs.lint-javascript.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Component Testing | ${{ needs.test-components.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Push | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Validation | ${{ needs.validate-infrastructure.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
